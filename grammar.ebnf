letter         = "A".."Z" | "a".."z" ;
digit          = "0".."9" ;
base12digit    = digit | "A" | "B" ;
hexDigit       = digit | "A".."F" ;

identifier     = letter , { letter | digit | "_" } ;
string         = '"' , { character } , '"' ;
number         = digit , { digit } ;
float          = digit , { digit } , "." , digit , { digit } ;

whitespace     = " " | "\t" | "\r" | "\n" ;
comment        = "//" , { character } ;

expression     = literal
               | identifier
               | "(" , expression , ")"
               | expression , binary_op , expression
               | unary_op , expression
               | function_call ;

literal        = number | float | string ;

binary_op      = "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" ;
unary_op       = "-" | "!" ;

function_call  = identifier , "(" , [ argument_list ] , ")" ;
argument_list  = expression , { "," , expression } ;

statement      = let_statement
               | return_statement
               | if_statement
               | loop_statement
               | expression_statement
               | tag_statement ;

let_statement      = "let" , identifier , "=" , expression , ";" ;
return_statement   = "return" , [ expression ] , ";" ;
expression_statement = expression , ";" ;

if_statement       = "if" , "(" , expression , ")" , block , [ "else" , block ] ;

loop_statement     = "loop" , identifier , "from" , expression , "to" , expression , block ;

block              = "{" , { statement } , "}" ;

tag_statement      = tag_keyword , [ expression ] , ";" ;

tag_keyword        = "say" | "show" | "check" | "validate" | "capture" ;

function_def   = "func" , identifier , "(" , [ param_list ] , ")" , block ;

param_list     = parameter , { "," , parameter } ;
parameter      = identifier ;

struct_def     = "struct" , identifier , "{" , { variable_def } , "}" ;
class_def      = "class" , identifier , "{" , { function_def | variable_def } , "}" ;

variable_def   = "let" , identifier , ":" , type_name , [ "=" , expression ] , ";" ;

type_name      = "int" | "float" | "string" | "bool" | identifier ;

capsule       = "capsule" , identifier , ":" , capsule_block ;

capsule_block = { statement | function_def | struct_def | class_def } ;

tag_keyword =
    "say" | "do" | "use" | "show" | "validate" | "pause" | "resume"
  | "raise" | "throw" | "catch" | "reverse" | "rewind" | "suggest"
  | "map" | "auto" | "archive" | "expire" | "loop" | "recall"
  | "block" | "capture" | "measure" | "approximate" | "assert"
  | "theorize" | "evaluate" | "proof" | "shorthand" | "mirror"
  | "level" | "enum" | "ask" | "deny" | "halt" | "reference" ;

repeatable     = tag_keyword , "each" , "in" , collection_expr , block ;

collection_expr = "[" , expression , { "," , expression } , "]" ;

program        = { capsule } , EOF ;
